
.. _ch12_00:

Встроенный Perl
===============

Exim может быть собран с встроенным интерпретатором perl. Когда это сделано, подпрограммы Perl можно вызывать как часть процесса раскрытия. Для использования поддержки Perl, в системе должен быть установлен Perl, версии не ниже 5.004, или более новой. Для включения встроенного интерпретатора perl в бинарный файл exim'a, включите строку::

    EXIM_PERL = perl.o

в ваш *Local/Makefile*, и затем соберите Exim обычным способом.


.. _ch12_01:

Настройка использования Perl
----------------------------

Доступ к подпрограммам Perl осуществляется через глобальную конфигурационную опцию **perl_startup**, и оператор раскрытия **${perl ...}**. Если опция **perl_startup** отсутствует в конфигурационном файле exim, тогда интерпретатор Perl не запускается, и для Exim почти нет накладных расходов (т.к. ни одна библиотек Perl не использует страницы памяти). Если опция **perl_startup** присутствует, тогда ассоциированное значение берётся чтобы быть кодом Perl, выполняемым во вновь созданном интерпретаторе Perl.

Значение **perl_startup** не раскрывается Exim'ом, таким образом, вам не нужно добавлять символ обратного слэша перед символами имеющими специальное значение. Опция, обычно, выглядит так::

    perl_startup = do '/etc/exim.pl'

где */etc/exim.pl* - код Perl, определяющий любые подрограммы, которые вы хотите использовать с exim. Exim может быть сконфигурирован как для немедленного запуска интерпретатора Perl сразу, так и для запуска интерпретатора Perl при первом обращении к нему. Старт интепретатора в начале, гарантирует, что действие будет сделано в то время, когда exim имеет setuid привилегии, но может вызвать ненужные накладные расходя, если Perl, фактически, не используется в выполняемой части. Кроме этого, отметтьте, что это не означает, что Exim работает от root`a, при вызове Perl`a в более поздние моменты времени. По дефолту, интерпретатор запускается только когда он необходим, и это может быть изменено в двух местах:

* Установкой опции **perl_at_start** (булева опция) в конфигурации запрашивается запуск при начале работы Exim`a.
* Опция командной строки **-ps**, также вызывает запуск вместе с Exim`ом, перезаписывая значение **perl_at_start**.

Также, есть опция командной строки **-pd** (для задержки), подавляющая начальный запуск, даже если уставновлена **perl_at_start**.

.. _ch12_02:

Вызов подпрограмм Perl
----------------------

Когда конфигурационный файл включает опцию **perl_startup**, вы можете использовать элемен раскрытия строк для вызова подрограмм Perl, заданных кодом **perl_startup**. Оператор используется в любой из следующих форм::

    ${perl{foo}}
    ${perl{foo}{argument}}
    ${perl{foo}{argument1}{argument2} ... }

вызывающих подпрограмму **foo** с заданными параметрами. Может быть передано, максимум, восемь параметров. Передача большего числа приводит к ошибке раскрытия, с сообщением об ошибке, такой формы::

    Too many arguments passed to Perl subroutine "foo" (max is 8)

Возвращаемое значение подрограммы Perl оценивается в скалярных величинах до возвращения его Exim`у, чтобы быть вставленным в раскрытую строку. Если возвращённое значение - *undef*, раскрытие терпит принудительную неудачу таким же образом, как и явный “fail” в элементе **if** или **lookup**. Если подпрограмма прерывается повинуясь функции Perl`a **die**, раскрытие неудачно, с сообщением об ошибке, которое переданно **die**.

.. _ch12_03:

Вызов функций Exim`a из Perl`a
------------------------------

Внутри любого кода Perl, вызыванного из Exim, доступна функция *Exim::expand_string()*, для обратного вызова в функцию раскрытия Exim. Для примера, код Perl

::

    my $lp = Exim::expand_string('$local_part');

сделает текущую переменную Exim`a ``$local_part``, доступной в переменной Perl ``$lp``. Отметтьте, что тут одиночные кавычки, а не двойные, для предотвращения интепретации ``local_part`` как переменной Perl.

Если раскрытие строки принудительно сделано неуспешным, элементом “fail”, результат *Exim::expand_string()* - **undef**. Если в строке раскрытия есть синтаксическая ошибка, из оригинального раскрытия строки вызывается ошибка Perl, с соотвествующим сообщением об ошибке, таким же образом как будто использовалось **die**.

Внутри кода Perl доступны две другие функции Exim. *Exim::debug_write()* записывает строку в стандартный поток ошибок, если включена отладка Exim. Если вы хотите добавлять в конец строки символ новой строки, вы его должны подставить. *Exim::log_write()* пишет строки в основной лог Exim`a, добавляя в начале метку времени. В этом случае, вам не нужно добавлять перевод строки.

.. _ch12_04:

Использование стандартного вывода и ошибок Perl`ом
--------------------------------------------------

Вы не должны записывать в стандартный поток ошибок, или стандартный вывод изнутри вашего кода Perl, поскольку не заданы их установки. В версиях Exim до 4.50, это возможно для стандартного вывода или стандартного потока ошибок, для ссылки на SMTP-соединение в течение приёма сообщения даемоном.Запись в этот поток вызывает хаос. С Exim 4.50, прогресс, стандартные потоки ошибок и вывода соединены с */dev/null*, в даемоне. Хаос отсутствует, но вывод потерян.

Утверждение Perl **warn**, по умолчанию, пишется в стандартный поток ошибок. Вызовы **warn** могут быть встроены в модули Perl, которые вы используете, но которые не контролируете. Когда Exim запускает интерпретатор Perl, он принимает меры для записи вывода утверждений **warn** в главный лог Exim`a. Вы можете изменить это, путём включения соответствующей Perl'овой феньки, где-то внутри его кода. например, чтобы полностью отказаться от вывода **warn**, вам необходимо это::

    $SIG{__WARN__} = sub { };

Всякий раз, когда появляется **warn**, вызывается безымянная программа. В этом примере, код программы пуст, таким образом, она ничего не делает, но вы можете включить любой код Perl, который вам нравится. Текст сообщения **warn** передаётся как первый параметра подпрограммы.

